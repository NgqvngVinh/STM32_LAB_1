
Lab1_ex3+4+5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001530  080001d0  080001d0  000011d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001700  08001700  00002700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001730  08001730  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001730  08001730  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001730  08001730  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001730  08001730  00002730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001734  08001734  00002734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001738  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001744  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001744  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028d2  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e56  00000000  00000000  00005907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d8  00000000  00000000  00006760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c0  00000000  00000000  00006b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f081  00000000  00000000  00006df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004a66  00000000  00000000  00015e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b4a7  00000000  00000000  0001a8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00075d86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d58  00000000  00000000  00075dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00076b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080016e8 	.word	0x080016e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	080016e8 	.word	0x080016e8

08000210 <display7SEG.0>:

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  void display7SEG(int num) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	f8c7 c000 	str.w	ip, [r7]
      switch (num) {
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b09      	cmp	r3, #9
 8000220:	f200 8180 	bhi.w	8000524 <display7SEG.0+0x314>
 8000224:	a201      	add	r2, pc, #4	@ (adr r2, 800022c <display7SEG.0+0x1c>)
 8000226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022a:	bf00      	nop
 800022c:	08000255 	.word	0x08000255
 8000230:	0800029d 	.word	0x0800029d
 8000234:	080002e5 	.word	0x080002e5
 8000238:	0800032d 	.word	0x0800032d
 800023c:	08000375 	.word	0x08000375
 8000240:	080003bd 	.word	0x080003bd
 8000244:	08000405 	.word	0x08000405
 8000248:	0800044d 	.word	0x0800044d
 800024c:	08000495 	.word	0x08000495
 8000250:	080004dd 	.word	0x080004dd
          case 0:
              //printf("Segments: a, b, c, d, e, f\n");
        	  HAL_GPIO_WritePin(GPIOB,a_Pin,GPIO_PIN_RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	2101      	movs	r1, #1
 8000258:	48b5      	ldr	r0, [pc, #724]	@ (8000530 <display7SEG.0+0x320>)
 800025a:	f000 fe57 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,b_Pin,GPIO_PIN_RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	2102      	movs	r1, #2
 8000262:	48b3      	ldr	r0, [pc, #716]	@ (8000530 <display7SEG.0+0x320>)
 8000264:	f000 fe52 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,c_Pin,GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2104      	movs	r1, #4
 800026c:	48b0      	ldr	r0, [pc, #704]	@ (8000530 <display7SEG.0+0x320>)
 800026e:	f000 fe4d 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,d_Pin,GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	2108      	movs	r1, #8
 8000276:	48ae      	ldr	r0, [pc, #696]	@ (8000530 <display7SEG.0+0x320>)
 8000278:	f000 fe48 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,e_Pin,GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	2110      	movs	r1, #16
 8000280:	48ab      	ldr	r0, [pc, #684]	@ (8000530 <display7SEG.0+0x320>)
 8000282:	f000 fe43 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,f_Pin,GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	2120      	movs	r1, #32
 800028a:	48a9      	ldr	r0, [pc, #676]	@ (8000530 <display7SEG.0+0x320>)
 800028c:	f000 fe3e 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,g_Pin,GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2140      	movs	r1, #64	@ 0x40
 8000294:	48a6      	ldr	r0, [pc, #664]	@ (8000530 <display7SEG.0+0x320>)
 8000296:	f000 fe39 	bl	8000f0c <HAL_GPIO_WritePin>
              break;
 800029a:	e144      	b.n	8000526 <display7SEG.0+0x316>
          case 1:
//              printf("Segments: b, c\n");
        	  HAL_GPIO_WritePin(GPIOB,a_Pin,GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	2101      	movs	r1, #1
 80002a0:	48a3      	ldr	r0, [pc, #652]	@ (8000530 <display7SEG.0+0x320>)
 80002a2:	f000 fe33 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,b_Pin,GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2102      	movs	r1, #2
 80002aa:	48a1      	ldr	r0, [pc, #644]	@ (8000530 <display7SEG.0+0x320>)
 80002ac:	f000 fe2e 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,c_Pin,GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2104      	movs	r1, #4
 80002b4:	489e      	ldr	r0, [pc, #632]	@ (8000530 <display7SEG.0+0x320>)
 80002b6:	f000 fe29 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,d_Pin,GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2108      	movs	r1, #8
 80002be:	489c      	ldr	r0, [pc, #624]	@ (8000530 <display7SEG.0+0x320>)
 80002c0:	f000 fe24 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,e_Pin,GPIO_PIN_SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2110      	movs	r1, #16
 80002c8:	4899      	ldr	r0, [pc, #612]	@ (8000530 <display7SEG.0+0x320>)
 80002ca:	f000 fe1f 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,f_Pin,GPIO_PIN_SET);
 80002ce:	2201      	movs	r2, #1
 80002d0:	2120      	movs	r1, #32
 80002d2:	4897      	ldr	r0, [pc, #604]	@ (8000530 <display7SEG.0+0x320>)
 80002d4:	f000 fe1a 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,g_Pin,GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	2140      	movs	r1, #64	@ 0x40
 80002dc:	4894      	ldr	r0, [pc, #592]	@ (8000530 <display7SEG.0+0x320>)
 80002de:	f000 fe15 	bl	8000f0c <HAL_GPIO_WritePin>
              break;
 80002e2:	e120      	b.n	8000526 <display7SEG.0+0x316>
          case 2:
//              printf("Segments: a, b, d, e, g\n");
        	  HAL_GPIO_WritePin(GPIOB,a_Pin,GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2101      	movs	r1, #1
 80002e8:	4891      	ldr	r0, [pc, #580]	@ (8000530 <display7SEG.0+0x320>)
 80002ea:	f000 fe0f 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,b_Pin,GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2102      	movs	r1, #2
 80002f2:	488f      	ldr	r0, [pc, #572]	@ (8000530 <display7SEG.0+0x320>)
 80002f4:	f000 fe0a 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,c_Pin,GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2104      	movs	r1, #4
 80002fc:	488c      	ldr	r0, [pc, #560]	@ (8000530 <display7SEG.0+0x320>)
 80002fe:	f000 fe05 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,d_Pin,GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2108      	movs	r1, #8
 8000306:	488a      	ldr	r0, [pc, #552]	@ (8000530 <display7SEG.0+0x320>)
 8000308:	f000 fe00 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,e_Pin,GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2110      	movs	r1, #16
 8000310:	4887      	ldr	r0, [pc, #540]	@ (8000530 <display7SEG.0+0x320>)
 8000312:	f000 fdfb 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,f_Pin,GPIO_PIN_SET);
 8000316:	2201      	movs	r2, #1
 8000318:	2120      	movs	r1, #32
 800031a:	4885      	ldr	r0, [pc, #532]	@ (8000530 <display7SEG.0+0x320>)
 800031c:	f000 fdf6 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,g_Pin,GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2140      	movs	r1, #64	@ 0x40
 8000324:	4882      	ldr	r0, [pc, #520]	@ (8000530 <display7SEG.0+0x320>)
 8000326:	f000 fdf1 	bl	8000f0c <HAL_GPIO_WritePin>
              break;
 800032a:	e0fc      	b.n	8000526 <display7SEG.0+0x316>
          case 3:
//              printf("Segments: a, b, c, d, g\n");
        	  HAL_GPIO_WritePin(GPIOB,a_Pin,GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2101      	movs	r1, #1
 8000330:	487f      	ldr	r0, [pc, #508]	@ (8000530 <display7SEG.0+0x320>)
 8000332:	f000 fdeb 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,b_Pin,GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2102      	movs	r1, #2
 800033a:	487d      	ldr	r0, [pc, #500]	@ (8000530 <display7SEG.0+0x320>)
 800033c:	f000 fde6 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,c_Pin,GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2104      	movs	r1, #4
 8000344:	487a      	ldr	r0, [pc, #488]	@ (8000530 <display7SEG.0+0x320>)
 8000346:	f000 fde1 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,d_Pin,GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2108      	movs	r1, #8
 800034e:	4878      	ldr	r0, [pc, #480]	@ (8000530 <display7SEG.0+0x320>)
 8000350:	f000 fddc 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,e_Pin,GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2110      	movs	r1, #16
 8000358:	4875      	ldr	r0, [pc, #468]	@ (8000530 <display7SEG.0+0x320>)
 800035a:	f000 fdd7 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,f_Pin,GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2120      	movs	r1, #32
 8000362:	4873      	ldr	r0, [pc, #460]	@ (8000530 <display7SEG.0+0x320>)
 8000364:	f000 fdd2 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,g_Pin,GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2140      	movs	r1, #64	@ 0x40
 800036c:	4870      	ldr	r0, [pc, #448]	@ (8000530 <display7SEG.0+0x320>)
 800036e:	f000 fdcd 	bl	8000f0c <HAL_GPIO_WritePin>
              break;
 8000372:	e0d8      	b.n	8000526 <display7SEG.0+0x316>
          case 4:
//              printf("Segments: b, c, f, g\n");
        	  HAL_GPIO_WritePin(GPIOB,a_Pin,GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2101      	movs	r1, #1
 8000378:	486d      	ldr	r0, [pc, #436]	@ (8000530 <display7SEG.0+0x320>)
 800037a:	f000 fdc7 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,b_Pin,GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2102      	movs	r1, #2
 8000382:	486b      	ldr	r0, [pc, #428]	@ (8000530 <display7SEG.0+0x320>)
 8000384:	f000 fdc2 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,c_Pin,GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2104      	movs	r1, #4
 800038c:	4868      	ldr	r0, [pc, #416]	@ (8000530 <display7SEG.0+0x320>)
 800038e:	f000 fdbd 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,d_Pin,GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2108      	movs	r1, #8
 8000396:	4866      	ldr	r0, [pc, #408]	@ (8000530 <display7SEG.0+0x320>)
 8000398:	f000 fdb8 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,e_Pin,GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2110      	movs	r1, #16
 80003a0:	4863      	ldr	r0, [pc, #396]	@ (8000530 <display7SEG.0+0x320>)
 80003a2:	f000 fdb3 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,f_Pin,GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2120      	movs	r1, #32
 80003aa:	4861      	ldr	r0, [pc, #388]	@ (8000530 <display7SEG.0+0x320>)
 80003ac:	f000 fdae 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,g_Pin,GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2140      	movs	r1, #64	@ 0x40
 80003b4:	485e      	ldr	r0, [pc, #376]	@ (8000530 <display7SEG.0+0x320>)
 80003b6:	f000 fda9 	bl	8000f0c <HAL_GPIO_WritePin>
              break;
 80003ba:	e0b4      	b.n	8000526 <display7SEG.0+0x316>
          case 5:
//              printf("Segments: a, c, d, f, g\n");
        	  HAL_GPIO_WritePin(GPIOB,a_Pin,GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2101      	movs	r1, #1
 80003c0:	485b      	ldr	r0, [pc, #364]	@ (8000530 <display7SEG.0+0x320>)
 80003c2:	f000 fda3 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,b_Pin,GPIO_PIN_SET);
 80003c6:	2201      	movs	r2, #1
 80003c8:	2102      	movs	r1, #2
 80003ca:	4859      	ldr	r0, [pc, #356]	@ (8000530 <display7SEG.0+0x320>)
 80003cc:	f000 fd9e 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,c_Pin,GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2104      	movs	r1, #4
 80003d4:	4856      	ldr	r0, [pc, #344]	@ (8000530 <display7SEG.0+0x320>)
 80003d6:	f000 fd99 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,d_Pin,GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2108      	movs	r1, #8
 80003de:	4854      	ldr	r0, [pc, #336]	@ (8000530 <display7SEG.0+0x320>)
 80003e0:	f000 fd94 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,e_Pin,GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2110      	movs	r1, #16
 80003e8:	4851      	ldr	r0, [pc, #324]	@ (8000530 <display7SEG.0+0x320>)
 80003ea:	f000 fd8f 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,f_Pin,GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2120      	movs	r1, #32
 80003f2:	484f      	ldr	r0, [pc, #316]	@ (8000530 <display7SEG.0+0x320>)
 80003f4:	f000 fd8a 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,g_Pin,GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2140      	movs	r1, #64	@ 0x40
 80003fc:	484c      	ldr	r0, [pc, #304]	@ (8000530 <display7SEG.0+0x320>)
 80003fe:	f000 fd85 	bl	8000f0c <HAL_GPIO_WritePin>
              break;
 8000402:	e090      	b.n	8000526 <display7SEG.0+0x316>
          case 6:
//              printf("Segments: a, c, d, e, f, g\n");
        	  HAL_GPIO_WritePin(a_GPIO_Port,a_Pin,GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2101      	movs	r1, #1
 8000408:	4849      	ldr	r0, [pc, #292]	@ (8000530 <display7SEG.0+0x320>)
 800040a:	f000 fd7f 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(b_GPIO_Port,b_Pin,GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2102      	movs	r1, #2
 8000412:	4847      	ldr	r0, [pc, #284]	@ (8000530 <display7SEG.0+0x320>)
 8000414:	f000 fd7a 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(c_GPIO_Port,c_Pin,GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2104      	movs	r1, #4
 800041c:	4844      	ldr	r0, [pc, #272]	@ (8000530 <display7SEG.0+0x320>)
 800041e:	f000 fd75 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(d_GPIO_Port,d_Pin,GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2108      	movs	r1, #8
 8000426:	4842      	ldr	r0, [pc, #264]	@ (8000530 <display7SEG.0+0x320>)
 8000428:	f000 fd70 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(e_GPIO_Port,e_Pin,GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2110      	movs	r1, #16
 8000430:	483f      	ldr	r0, [pc, #252]	@ (8000530 <display7SEG.0+0x320>)
 8000432:	f000 fd6b 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(f_GPIO_Port,f_Pin,GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2120      	movs	r1, #32
 800043a:	483d      	ldr	r0, [pc, #244]	@ (8000530 <display7SEG.0+0x320>)
 800043c:	f000 fd66 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(g_GPIO_Port,g_Pin,GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2140      	movs	r1, #64	@ 0x40
 8000444:	483a      	ldr	r0, [pc, #232]	@ (8000530 <display7SEG.0+0x320>)
 8000446:	f000 fd61 	bl	8000f0c <HAL_GPIO_WritePin>
              break;
 800044a:	e06c      	b.n	8000526 <display7SEG.0+0x316>
          case 7:
//              printf("Segments: a, b, c\n");
        	  HAL_GPIO_WritePin(a_GPIO_Port,a_Pin,GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2101      	movs	r1, #1
 8000450:	4837      	ldr	r0, [pc, #220]	@ (8000530 <display7SEG.0+0x320>)
 8000452:	f000 fd5b 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(b_GPIO_Port,b_Pin,GPIO_PIN_RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2102      	movs	r1, #2
 800045a:	4835      	ldr	r0, [pc, #212]	@ (8000530 <display7SEG.0+0x320>)
 800045c:	f000 fd56 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(c_GPIO_Port,c_Pin,GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2104      	movs	r1, #4
 8000464:	4832      	ldr	r0, [pc, #200]	@ (8000530 <display7SEG.0+0x320>)
 8000466:	f000 fd51 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(d_GPIO_Port,d_Pin,GPIO_PIN_SET);
 800046a:	2201      	movs	r2, #1
 800046c:	2108      	movs	r1, #8
 800046e:	4830      	ldr	r0, [pc, #192]	@ (8000530 <display7SEG.0+0x320>)
 8000470:	f000 fd4c 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(e_GPIO_Port,e_Pin,GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2110      	movs	r1, #16
 8000478:	482d      	ldr	r0, [pc, #180]	@ (8000530 <display7SEG.0+0x320>)
 800047a:	f000 fd47 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(f_GPIO_Port,f_Pin,GPIO_PIN_SET);
 800047e:	2201      	movs	r2, #1
 8000480:	2120      	movs	r1, #32
 8000482:	482b      	ldr	r0, [pc, #172]	@ (8000530 <display7SEG.0+0x320>)
 8000484:	f000 fd42 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(g_GPIO_Port,g_Pin,GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	2140      	movs	r1, #64	@ 0x40
 800048c:	4828      	ldr	r0, [pc, #160]	@ (8000530 <display7SEG.0+0x320>)
 800048e:	f000 fd3d 	bl	8000f0c <HAL_GPIO_WritePin>
              break;
 8000492:	e048      	b.n	8000526 <display7SEG.0+0x316>
          case 8:
//              printf("Segments: a, b, c, d, e, f, g\n");
        	  HAL_GPIO_WritePin(a_GPIO_Port,a_Pin,GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2101      	movs	r1, #1
 8000498:	4825      	ldr	r0, [pc, #148]	@ (8000530 <display7SEG.0+0x320>)
 800049a:	f000 fd37 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(b_GPIO_Port,b_Pin,GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2102      	movs	r1, #2
 80004a2:	4823      	ldr	r0, [pc, #140]	@ (8000530 <display7SEG.0+0x320>)
 80004a4:	f000 fd32 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(c_GPIO_Port,c_Pin,GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2104      	movs	r1, #4
 80004ac:	4820      	ldr	r0, [pc, #128]	@ (8000530 <display7SEG.0+0x320>)
 80004ae:	f000 fd2d 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(d_GPIO_Port,d_Pin,GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2108      	movs	r1, #8
 80004b6:	481e      	ldr	r0, [pc, #120]	@ (8000530 <display7SEG.0+0x320>)
 80004b8:	f000 fd28 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(e_GPIO_Port,e_Pin,GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2110      	movs	r1, #16
 80004c0:	481b      	ldr	r0, [pc, #108]	@ (8000530 <display7SEG.0+0x320>)
 80004c2:	f000 fd23 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(f_GPIO_Port,f_Pin,GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2120      	movs	r1, #32
 80004ca:	4819      	ldr	r0, [pc, #100]	@ (8000530 <display7SEG.0+0x320>)
 80004cc:	f000 fd1e 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(g_GPIO_Port,g_Pin,GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2140      	movs	r1, #64	@ 0x40
 80004d4:	4816      	ldr	r0, [pc, #88]	@ (8000530 <display7SEG.0+0x320>)
 80004d6:	f000 fd19 	bl	8000f0c <HAL_GPIO_WritePin>
              break;
 80004da:	e024      	b.n	8000526 <display7SEG.0+0x316>
          case 9:
//              printf("Segments: a, b, c, d, f, g\n");
        	  HAL_GPIO_WritePin(a_GPIO_Port,a_Pin,GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2101      	movs	r1, #1
 80004e0:	4813      	ldr	r0, [pc, #76]	@ (8000530 <display7SEG.0+0x320>)
 80004e2:	f000 fd13 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(b_GPIO_Port,b_Pin,GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2102      	movs	r1, #2
 80004ea:	4811      	ldr	r0, [pc, #68]	@ (8000530 <display7SEG.0+0x320>)
 80004ec:	f000 fd0e 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(c_GPIO_Port,c_Pin,GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2104      	movs	r1, #4
 80004f4:	480e      	ldr	r0, [pc, #56]	@ (8000530 <display7SEG.0+0x320>)
 80004f6:	f000 fd09 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(d_GPIO_Port,d_Pin,GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2108      	movs	r1, #8
 80004fe:	480c      	ldr	r0, [pc, #48]	@ (8000530 <display7SEG.0+0x320>)
 8000500:	f000 fd04 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(e_GPIO_Port,e_Pin,GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2110      	movs	r1, #16
 8000508:	4809      	ldr	r0, [pc, #36]	@ (8000530 <display7SEG.0+0x320>)
 800050a:	f000 fcff 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(f_GPIO_Port,f_Pin,GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2120      	movs	r1, #32
 8000512:	4807      	ldr	r0, [pc, #28]	@ (8000530 <display7SEG.0+0x320>)
 8000514:	f000 fcfa 	bl	8000f0c <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(g_GPIO_Port,g_Pin,GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2140      	movs	r1, #64	@ 0x40
 800051c:	4804      	ldr	r0, [pc, #16]	@ (8000530 <display7SEG.0+0x320>)
 800051e:	f000 fcf5 	bl	8000f0c <HAL_GPIO_WritePin>
              break;
 8000522:	e000      	b.n	8000526 <display7SEG.0+0x316>
          default:
        	  break;
 8000524:	bf00      	nop
      }
  }
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40010c00 	.word	0x40010c00

08000534 <main>:
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
int main(void)
 800053a:	f107 0318 	add.w	r3, r7, #24
 800053e:	603b      	str	r3, [r7, #0]
  HAL_Init();
 8000540:	f000 f9ff 	bl	8000942 <HAL_Init>
  SystemClock_Config();
 8000544:	f000 f8de 	bl	8000704 <SystemClock_Config>
  MX_GPIO_Init();
 8000548:	f000 f918 	bl	800077c <MX_GPIO_Init>
//b3 new
#define RED 0
#define YELLOW 1
#define GREEN 2

int counter=0; //b3,5
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
int led_status = RED;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
int countdown = 0; //b5
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]

  while (1)
  {

//b4
	  if( counter >= 10) counter = 0;
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2b09      	cmp	r3, #9
 800055c:	dd01      	ble.n	8000562 <main+0x2e>
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
	  display7SEG ( counter ++) ;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	1c5a      	adds	r2, r3, #1
 8000566:	60fa      	str	r2, [r7, #12]
 8000568:	463a      	mov	r2, r7
 800056a:	4694      	mov	ip, r2
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fe4f 	bl	8000210 <display7SEG.0>
	  HAL_Delay (1000) ;
 8000572:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000576:	f000 fa3d 	bl	80009f4 <HAL_Delay>
//		  	  HAL_Delay(1000);



//b5
	  	  switch (led_status){
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d04e      	beq.n	800061e <main+0xea>
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2b02      	cmp	r3, #2
 8000584:	f300 80af 	bgt.w	80006e6 <main+0x1b2>
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <main+0x62>
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d076      	beq.n	8000682 <main+0x14e>
	  			  led_status = RED;
	  			  counter =0;
	  			  }
	  			  break;
	  	  default:
	  		  	  break;
 8000594:	e0a7      	b.n	80006e6 <main+0x1b2>
	  		  	  HAL_GPIO_WritePin(LR1_GPIO_Port,LR1_Pin,GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2104      	movs	r1, #4
 800059a:	4859      	ldr	r0, [pc, #356]	@ (8000700 <main+0x1cc>)
 800059c:	f000 fcb6 	bl	8000f0c <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(LY1_GPIO_Port,LY1_Pin,GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2108      	movs	r1, #8
 80005a4:	4856      	ldr	r0, [pc, #344]	@ (8000700 <main+0x1cc>)
 80005a6:	f000 fcb1 	bl	8000f0c <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(LG1_GPIO_Port,LG1_Pin,GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2110      	movs	r1, #16
 80005ae:	4854      	ldr	r0, [pc, #336]	@ (8000700 <main+0x1cc>)
 80005b0:	f000 fcac 	bl	8000f0c <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(LR2_GPIO_Port,LR2_Pin,GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	4851      	ldr	r0, [pc, #324]	@ (8000700 <main+0x1cc>)
 80005ba:	f000 fca7 	bl	8000f0c <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(LY2_GPIO_Port,LY2_Pin,GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	@ 0x40
 80005c2:	484f      	ldr	r0, [pc, #316]	@ (8000700 <main+0x1cc>)
 80005c4:	f000 fca2 	bl	8000f0c <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(LG2_GPIO_Port,LG2_Pin,GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2180      	movs	r1, #128	@ 0x80
 80005cc:	484c      	ldr	r0, [pc, #304]	@ (8000700 <main+0x1cc>)
 80005ce:	f000 fc9d 	bl	8000f0c <HAL_GPIO_WritePin>
	  		  	  countdown = 5 - counter;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	f1c3 0305 	rsb	r3, r3, #5
 80005d8:	607b      	str	r3, [r7, #4]
	  		  	  display7SEG(countdown);
 80005da:	463b      	mov	r3, r7
 80005dc:	469c      	mov	ip, r3
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff fe16 	bl	8000210 <display7SEG.0>
	  		  	  counter++;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	3301      	adds	r3, #1
 80005e8:	60fb      	str	r3, [r7, #12]
	  		  	  if(counter >3){ //green up down -> yellow
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	dd0e      	ble.n	800060e <main+0xda>
	  		  		  HAL_GPIO_WritePin(LR2_GPIO_Port,LR2_Pin,GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2120      	movs	r1, #32
 80005f4:	4842      	ldr	r0, [pc, #264]	@ (8000700 <main+0x1cc>)
 80005f6:	f000 fc89 	bl	8000f0c <HAL_GPIO_WritePin>
	  		  		  HAL_GPIO_WritePin(LY2_GPIO_Port,LY2_Pin,GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2140      	movs	r1, #64	@ 0x40
 80005fe:	4840      	ldr	r0, [pc, #256]	@ (8000700 <main+0x1cc>)
 8000600:	f000 fc84 	bl	8000f0c <HAL_GPIO_WritePin>
	  		  		  HAL_GPIO_WritePin(LG2_GPIO_Port,LG2_Pin,GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2180      	movs	r1, #128	@ 0x80
 8000608:	483d      	ldr	r0, [pc, #244]	@ (8000700 <main+0x1cc>)
 800060a:	f000 fc7f 	bl	8000f0c <HAL_GPIO_WritePin>
	  		  	  if(counter ==5){
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b05      	cmp	r3, #5
 8000612:	d16a      	bne.n	80006ea <main+0x1b6>
	  		  		  led_status = GREEN;
 8000614:	2302      	movs	r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
	  		  		  counter = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
	  		  	  break;
 800061c:	e065      	b.n	80006ea <main+0x1b6>
	  	  	  	  HAL_GPIO_WritePin(LR1_GPIO_Port,LR1_Pin,GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2104      	movs	r1, #4
 8000622:	4837      	ldr	r0, [pc, #220]	@ (8000700 <main+0x1cc>)
 8000624:	f000 fc72 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(LY1_GPIO_Port,LY1_Pin,GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2108      	movs	r1, #8
 800062c:	4834      	ldr	r0, [pc, #208]	@ (8000700 <main+0x1cc>)
 800062e:	f000 fc6d 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(LG1_GPIO_Port,LG1_Pin,GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2110      	movs	r1, #16
 8000636:	4832      	ldr	r0, [pc, #200]	@ (8000700 <main+0x1cc>)
 8000638:	f000 fc68 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(LR2_GPIO_Port,LR2_Pin,GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2120      	movs	r1, #32
 8000640:	482f      	ldr	r0, [pc, #188]	@ (8000700 <main+0x1cc>)
 8000642:	f000 fc63 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(LY2_GPIO_Port,LY2_Pin,GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2140      	movs	r1, #64	@ 0x40
 800064a:	482d      	ldr	r0, [pc, #180]	@ (8000700 <main+0x1cc>)
 800064c:	f000 fc5e 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(LG2_GPIO_Port,LG2_Pin,GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2180      	movs	r1, #128	@ 0x80
 8000654:	482a      	ldr	r0, [pc, #168]	@ (8000700 <main+0x1cc>)
 8000656:	f000 fc59 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  countdown = 3 - counter;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f1c3 0303 	rsb	r3, r3, #3
 8000660:	607b      	str	r3, [r7, #4]
	  			  display7SEG(countdown);
 8000662:	463b      	mov	r3, r7
 8000664:	469c      	mov	ip, r3
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff fdd2 	bl	8000210 <display7SEG.0>
	  			  counter++;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3301      	adds	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
	  			  if(counter ==3){
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b03      	cmp	r3, #3
 8000676:	d13a      	bne.n	80006ee <main+0x1ba>
	  				  led_status = YELLOW;
 8000678:	2301      	movs	r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
	  				  counter =0;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
	  			  break;
 8000680:	e035      	b.n	80006ee <main+0x1ba>
	  			  HAL_GPIO_WritePin(LR1_GPIO_Port,LR1_Pin,GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2104      	movs	r1, #4
 8000686:	481e      	ldr	r0, [pc, #120]	@ (8000700 <main+0x1cc>)
 8000688:	f000 fc40 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(LY1_GPIO_Port,LY1_Pin,GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2108      	movs	r1, #8
 8000690:	481b      	ldr	r0, [pc, #108]	@ (8000700 <main+0x1cc>)
 8000692:	f000 fc3b 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(LG1_GPIO_Port,LG1_Pin,GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2110      	movs	r1, #16
 800069a:	4819      	ldr	r0, [pc, #100]	@ (8000700 <main+0x1cc>)
 800069c:	f000 fc36 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(LR2_GPIO_Port,LR2_Pin,GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2120      	movs	r1, #32
 80006a4:	4816      	ldr	r0, [pc, #88]	@ (8000700 <main+0x1cc>)
 80006a6:	f000 fc31 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(LY2_GPIO_Port,LY2_Pin,GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2140      	movs	r1, #64	@ 0x40
 80006ae:	4814      	ldr	r0, [pc, #80]	@ (8000700 <main+0x1cc>)
 80006b0:	f000 fc2c 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(LG2_GPIO_Port,LG2_Pin,GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2180      	movs	r1, #128	@ 0x80
 80006b8:	4811      	ldr	r0, [pc, #68]	@ (8000700 <main+0x1cc>)
 80006ba:	f000 fc27 	bl	8000f0c <HAL_GPIO_WritePin>
	  			  countdown = 2 - counter;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f1c3 0302 	rsb	r3, r3, #2
 80006c4:	607b      	str	r3, [r7, #4]
	  			  display7SEG(countdown);
 80006c6:	463b      	mov	r3, r7
 80006c8:	469c      	mov	ip, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff fda0 	bl	8000210 <display7SEG.0>
	  			  counter++;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
	  			  if(counter ==2){
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d10a      	bne.n	80006f2 <main+0x1be>
	  			  led_status = RED;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
	  			  counter =0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
	  			  break;
 80006e4:	e005      	b.n	80006f2 <main+0x1be>
	  		  	  break;
 80006e6:	bf00      	nop
 80006e8:	e004      	b.n	80006f4 <main+0x1c0>
	  		  	  break;
 80006ea:	bf00      	nop
 80006ec:	e002      	b.n	80006f4 <main+0x1c0>
	  			  break;
 80006ee:	bf00      	nop
 80006f0:	e000      	b.n	80006f4 <main+0x1c0>
	  			  break;
 80006f2:	bf00      	nop
	  	  }
	  		  	  HAL_Delay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006f8:	f000 f97c 	bl	80009f4 <HAL_Delay>
	  if( counter >= 10) counter = 0;
 80006fc:	e72c      	b.n	8000558 <main+0x24>
 80006fe:	bf00      	nop
 8000700:	40010800 	.word	0x40010800

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b090      	sub	sp, #64	@ 0x40
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0318 	add.w	r3, r7, #24
 800070e:	2228      	movs	r2, #40	@ 0x28
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f000 ffbc 	bl	8001690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000726:	2302      	movs	r3, #2
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072a:	2301      	movs	r3, #1
 800072c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	2310      	movs	r3, #16
 8000730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000732:	2300      	movs	r3, #0
 8000734:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fbfe 	bl	8000f3c <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000746:	f000 f86d 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fe6c 	bl	8001440 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800076e:	f000 f859 	bl	8000824 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3740      	adds	r7, #64	@ 0x40
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_GPIO_Init+0x9c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a20      	ldr	r2, [pc, #128]	@ (8000818 <MX_GPIO_Init+0x9c>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_GPIO_Init+0x9c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <MX_GPIO_Init+0x9c>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000818 <MX_GPIO_Init+0x9c>)
 80007ae:	f043 0308 	orr.w	r3, r3, #8
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <MX_GPIO_Init+0x9c>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LR1_Pin|LY1_Pin|LG1_Pin|LR2_Pin
 80007c0:	2200      	movs	r2, #0
 80007c2:	21fc      	movs	r1, #252	@ 0xfc
 80007c4:	4815      	ldr	r0, [pc, #84]	@ (800081c <MX_GPIO_Init+0xa0>)
 80007c6:	f000 fba1 	bl	8000f0c <HAL_GPIO_WritePin>
                          |LY2_Pin|LG2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|b2_Pin
 80007ca:	2200      	movs	r2, #0
 80007cc:	f64f 617f 	movw	r1, #65151	@ 0xfe7f
 80007d0:	4813      	ldr	r0, [pc, #76]	@ (8000820 <MX_GPIO_Init+0xa4>)
 80007d2:	f000 fb9b 	bl	8000f0c <HAL_GPIO_WritePin>
                          |g2_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin|a2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LR1_Pin LY1_Pin LG1_Pin LR2_Pin
                           LY2_Pin LG2_Pin */
  GPIO_InitStruct.Pin = LR1_Pin|LY1_Pin|LG1_Pin|LR2_Pin
 80007d6:	23fc      	movs	r3, #252	@ 0xfc
 80007d8:	60bb      	str	r3, [r7, #8]
                          |LY2_Pin|LG2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2302      	movs	r3, #2
 80007e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	4619      	mov	r1, r3
 80007ec:	480b      	ldr	r0, [pc, #44]	@ (800081c <MX_GPIO_Init+0xa0>)
 80007ee:	f000 fa09 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin b2_Pin
                           c2_Pin d2_Pin e2_Pin f2_Pin
                           g2_Pin d_Pin e_Pin f_Pin
                           g_Pin a2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|b2_Pin
 80007f2:	f64f 637f 	movw	r3, #65151	@ 0xfe7f
 80007f6:	60bb      	str	r3, [r7, #8]
                          |c2_Pin|d2_Pin|e2_Pin|f2_Pin
                          |g2_Pin|d_Pin|e_Pin|f_Pin
                          |g_Pin|a2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2302      	movs	r3, #2
 8000802:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4619      	mov	r1, r3
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_GPIO_Init+0xa4>)
 800080c:	f000 f9fa 	bl	8000c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40021000 	.word	0x40021000
 800081c:	40010800 	.word	0x40010800
 8000820:	40010c00 	.word	0x40010c00

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	4a14      	ldr	r2, [pc, #80]	@ (800088c <HAL_MspInit+0x5c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6193      	str	r3, [r2, #24]
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <HAL_MspInit+0x5c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <HAL_MspInit+0x60>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <HAL_MspInit+0x60>)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40021000 	.word	0x40021000
 8000890:	40010000 	.word	0x40010000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <NMI_Handler+0x4>

0800089c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <MemManage_Handler+0x4>

080008ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <UsageFault_Handler+0x4>

080008bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f86a 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f8:	f7ff fff8 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480b      	ldr	r0, [pc, #44]	@ (800092c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008fe:	490c      	ldr	r1, [pc, #48]	@ (8000930 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000900:	4a0c      	ldr	r2, [pc, #48]	@ (8000934 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a09      	ldr	r2, [pc, #36]	@ (8000938 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000914:	4c09      	ldr	r4, [pc, #36]	@ (800093c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f000 febd 	bl	80016a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000926:	f7ff fe05 	bl	8000534 <main>
  bx lr
 800092a:	4770      	bx	lr
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000934:	08001738 	.word	0x08001738
  ldr r2, =_sbss
 8000938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800093c:	2000002c 	.word	0x2000002c

08000940 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_IRQHandler>

08000942 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000946:	2003      	movs	r0, #3
 8000948:	f000 f928 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094c:	200f      	movs	r0, #15
 800094e:	f000 f805 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000952:	f7ff ff6d 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	bd80      	pop	{r7, pc}

0800095c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_InitTick+0x54>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_InitTick+0x58>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000972:	fbb3 f3f1 	udiv	r3, r3, r1
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f935 	bl	8000bea <HAL_SYSTICK_Config>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e00e      	b.n	80009a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d80a      	bhi.n	80009a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f000 f90b 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800099c:	4a06      	ldr	r2, [pc, #24]	@ (80009b8 <HAL_InitTick+0x5c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_IncTick+0x1c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <HAL_IncTick+0x20>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a03      	ldr	r2, [pc, #12]	@ (80009dc <HAL_IncTick+0x20>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000028 	.word	0x20000028

080009e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b02      	ldr	r3, [pc, #8]	@ (80009f0 <HAL_GetTick+0x10>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000028 	.word	0x20000028

080009f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009fc:	f7ff fff0 	bl	80009e0 <HAL_GetTick>
 8000a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0c:	d005      	beq.n	8000a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <HAL_Delay+0x44>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4413      	add	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a1a:	bf00      	nop
 8000a1c:	f7ff ffe0 	bl	80009e0 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d8f7      	bhi.n	8000a1c <HAL_Delay+0x28>
  {
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008

08000a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <__NVIC_SetPriorityGrouping+0x44>)
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	60d3      	str	r3, [r2, #12]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a88:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <__NVIC_GetPriorityGrouping+0x18>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	0a1b      	lsrs	r3, r3, #8
 8000a8e:	f003 0307 	and.w	r3, r3, #7
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	db0a      	blt.n	8000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	490c      	ldr	r1, [pc, #48]	@ (8000aec <__NVIC_SetPriority+0x4c>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	0112      	lsls	r2, r2, #4
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac8:	e00a      	b.n	8000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4908      	ldr	r1, [pc, #32]	@ (8000af0 <__NVIC_SetPriority+0x50>)
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	0112      	lsls	r2, r2, #4
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	440b      	add	r3, r1
 8000ade:	761a      	strb	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	@ 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	f1c3 0307 	rsb	r3, r3, #7
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf28      	it	cs
 8000b12:	2304      	movcs	r3, #4
 8000b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d902      	bls.n	8000b24 <NVIC_EncodePriority+0x30>
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3b03      	subs	r3, #3
 8000b22:	e000      	b.n	8000b26 <NVIC_EncodePriority+0x32>
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43da      	mvns	r2, r3
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa01 f303 	lsl.w	r3, r1, r3
 8000b46:	43d9      	mvns	r1, r3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	4313      	orrs	r3, r2
         );
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3724      	adds	r7, #36	@ 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff90 	bl	8000aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff49 	bl	8000a3c <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff5e 	bl	8000a84 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff90 	bl	8000af4 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5f 	bl	8000aa0 <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffb0 	bl	8000b58 <SysTick_Config>
 8000bf8:	4603      	mov	r3, r0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b08b      	sub	sp, #44	@ 0x2c
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c16:	e169      	b.n	8000eec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 8158 	bne.w	8000ee6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4a9a      	ldr	r2, [pc, #616]	@ (8000ea4 <HAL_GPIO_Init+0x2a0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d05e      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c40:	4a98      	ldr	r2, [pc, #608]	@ (8000ea4 <HAL_GPIO_Init+0x2a0>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d875      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c46:	4a98      	ldr	r2, [pc, #608]	@ (8000ea8 <HAL_GPIO_Init+0x2a4>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d058      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c4c:	4a96      	ldr	r2, [pc, #600]	@ (8000ea8 <HAL_GPIO_Init+0x2a4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d86f      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c52:	4a96      	ldr	r2, [pc, #600]	@ (8000eac <HAL_GPIO_Init+0x2a8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d052      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c58:	4a94      	ldr	r2, [pc, #592]	@ (8000eac <HAL_GPIO_Init+0x2a8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d869      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c5e:	4a94      	ldr	r2, [pc, #592]	@ (8000eb0 <HAL_GPIO_Init+0x2ac>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d04c      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c64:	4a92      	ldr	r2, [pc, #584]	@ (8000eb0 <HAL_GPIO_Init+0x2ac>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d863      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c6a:	4a92      	ldr	r2, [pc, #584]	@ (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d046      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
 8000c70:	4a90      	ldr	r2, [pc, #576]	@ (8000eb4 <HAL_GPIO_Init+0x2b0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d85d      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d82a      	bhi.n	8000cd0 <HAL_GPIO_Init+0xcc>
 8000c7a:	2b12      	cmp	r3, #18
 8000c7c:	d859      	bhi.n	8000d32 <HAL_GPIO_Init+0x12e>
 8000c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c84 <HAL_GPIO_Init+0x80>)
 8000c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c84:	08000cff 	.word	0x08000cff
 8000c88:	08000cd9 	.word	0x08000cd9
 8000c8c:	08000ceb 	.word	0x08000ceb
 8000c90:	08000d2d 	.word	0x08000d2d
 8000c94:	08000d33 	.word	0x08000d33
 8000c98:	08000d33 	.word	0x08000d33
 8000c9c:	08000d33 	.word	0x08000d33
 8000ca0:	08000d33 	.word	0x08000d33
 8000ca4:	08000d33 	.word	0x08000d33
 8000ca8:	08000d33 	.word	0x08000d33
 8000cac:	08000d33 	.word	0x08000d33
 8000cb0:	08000d33 	.word	0x08000d33
 8000cb4:	08000d33 	.word	0x08000d33
 8000cb8:	08000d33 	.word	0x08000d33
 8000cbc:	08000d33 	.word	0x08000d33
 8000cc0:	08000d33 	.word	0x08000d33
 8000cc4:	08000d33 	.word	0x08000d33
 8000cc8:	08000ce1 	.word	0x08000ce1
 8000ccc:	08000cf5 	.word	0x08000cf5
 8000cd0:	4a79      	ldr	r2, [pc, #484]	@ (8000eb8 <HAL_GPIO_Init+0x2b4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d013      	beq.n	8000cfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cd6:	e02c      	b.n	8000d32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e029      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e024      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	3308      	adds	r3, #8
 8000cf0:	623b      	str	r3, [r7, #32]
          break;
 8000cf2:	e01f      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	330c      	adds	r3, #12
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	e01a      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d102      	bne.n	8000d0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d06:	2304      	movs	r3, #4
 8000d08:	623b      	str	r3, [r7, #32]
          break;
 8000d0a:	e013      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d105      	bne.n	8000d20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d14:	2308      	movs	r3, #8
 8000d16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	611a      	str	r2, [r3, #16]
          break;
 8000d1e:	e009      	b.n	8000d34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d20:	2308      	movs	r3, #8
 8000d22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	615a      	str	r2, [r3, #20]
          break;
 8000d2a:	e003      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
          break;
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x130>
          break;
 8000d32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2bff      	cmp	r3, #255	@ 0xff
 8000d38:	d801      	bhi.n	8000d3e <HAL_GPIO_Init+0x13a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	e001      	b.n	8000d42 <HAL_GPIO_Init+0x13e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	3304      	adds	r3, #4
 8000d42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	2bff      	cmp	r3, #255	@ 0xff
 8000d48:	d802      	bhi.n	8000d50 <HAL_GPIO_Init+0x14c>
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x152>
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	3b08      	subs	r3, #8
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	401a      	ands	r2, r3
 8000d68:	6a39      	ldr	r1, [r7, #32]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	431a      	orrs	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 80b1 	beq.w	8000ee6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d84:	4b4d      	ldr	r3, [pc, #308]	@ (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a4c      	ldr	r2, [pc, #304]	@ (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b4a      	ldr	r3, [pc, #296]	@ (8000ebc <HAL_GPIO_Init+0x2b8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d9c:	4a48      	ldr	r2, [pc, #288]	@ (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4a40      	ldr	r2, [pc, #256]	@ (8000ec4 <HAL_GPIO_Init+0x2c0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d013      	beq.n	8000df0 <HAL_GPIO_Init+0x1ec>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a3f      	ldr	r2, [pc, #252]	@ (8000ec8 <HAL_GPIO_Init+0x2c4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d00d      	beq.n	8000dec <HAL_GPIO_Init+0x1e8>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a3e      	ldr	r2, [pc, #248]	@ (8000ecc <HAL_GPIO_Init+0x2c8>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d007      	beq.n	8000de8 <HAL_GPIO_Init+0x1e4>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d101      	bne.n	8000de4 <HAL_GPIO_Init+0x1e0>
 8000de0:	2303      	movs	r3, #3
 8000de2:	e006      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000de4:	2304      	movs	r3, #4
 8000de6:	e004      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e002      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000dec:	2301      	movs	r3, #1
 8000dee:	e000      	b.n	8000df2 <HAL_GPIO_Init+0x1ee>
 8000df0:	2300      	movs	r3, #0
 8000df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000df4:	f002 0203 	and.w	r2, r2, #3
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	4093      	lsls	r3, r2
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e02:	492f      	ldr	r1, [pc, #188]	@ (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	3302      	adds	r3, #2
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	492c      	ldr	r1, [pc, #176]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	608b      	str	r3, [r1, #8]
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4928      	ldr	r1, [pc, #160]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e44:	4b23      	ldr	r3, [pc, #140]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	4922      	ldr	r1, [pc, #136]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	60cb      	str	r3, [r1, #12]
 8000e50:	e006      	b.n	8000e60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e52:	4b20      	ldr	r3, [pc, #128]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	491e      	ldr	r1, [pc, #120]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4918      	ldr	r1, [pc, #96]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
 8000e78:	e006      	b.n	8000e88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4914      	ldr	r1, [pc, #80]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d021      	beq.n	8000ed8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	490e      	ldr	r1, [pc, #56]	@ (8000ed4 <HAL_GPIO_Init+0x2d0>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	600b      	str	r3, [r1, #0]
 8000ea0:	e021      	b.n	8000ee6 <HAL_GPIO_Init+0x2e2>
 8000ea2:	bf00      	nop
 8000ea4:	10320000 	.word	0x10320000
 8000ea8:	10310000 	.word	0x10310000
 8000eac:	10220000 	.word	0x10220000
 8000eb0:	10210000 	.word	0x10210000
 8000eb4:	10120000 	.word	0x10120000
 8000eb8:	10110000 	.word	0x10110000
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	40010800 	.word	0x40010800
 8000ec8:	40010c00 	.word	0x40010c00
 8000ecc:	40011000 	.word	0x40011000
 8000ed0:	40011400 	.word	0x40011400
 8000ed4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <HAL_GPIO_Init+0x304>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4909      	ldr	r1, [pc, #36]	@ (8000f08 <HAL_GPIO_Init+0x304>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee8:	3301      	adds	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f47f ae8e 	bne.w	8000c18 <HAL_GPIO_Init+0x14>
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	372c      	adds	r7, #44	@ 0x2c
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	40010400 	.word	0x40010400

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	611a      	str	r2, [r3, #16]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e272      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 8087 	beq.w	800106a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f5c:	4b92      	ldr	r3, [pc, #584]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d00c      	beq.n	8000f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f68:	4b8f      	ldr	r3, [pc, #572]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d112      	bne.n	8000f9a <HAL_RCC_OscConfig+0x5e>
 8000f74:	4b8c      	ldr	r3, [pc, #560]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f80:	d10b      	bne.n	8000f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f82:	4b89      	ldr	r3, [pc, #548]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d06c      	beq.n	8001068 <HAL_RCC_OscConfig+0x12c>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d168      	bne.n	8001068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e24c      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x76>
 8000fa4:	4b80      	ldr	r3, [pc, #512]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a7f      	ldr	r2, [pc, #508]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e02e      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x98>
 8000fba:	4b7b      	ldr	r3, [pc, #492]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7a      	ldr	r2, [pc, #488]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b78      	ldr	r3, [pc, #480]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a77      	ldr	r2, [pc, #476]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e01d      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0xbc>
 8000fde:	4b72      	ldr	r3, [pc, #456]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a71      	ldr	r2, [pc, #452]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b6f      	ldr	r3, [pc, #444]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a6e      	ldr	r2, [pc, #440]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b68      	ldr	r3, [pc, #416]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a67      	ldr	r2, [pc, #412]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800100e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fce2 	bl	80009e0 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fcde 	bl	80009e0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	@ 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e200      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	4b5d      	ldr	r3, [pc, #372]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f0      	beq.n	8001020 <HAL_RCC_OscConfig+0xe4>
 800103e:	e014      	b.n	800106a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fcce 	bl	80009e0 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fcca 	bl	80009e0 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	@ 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e1ec      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	4b53      	ldr	r3, [pc, #332]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x10c>
 8001066:	e000      	b.n	800106a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d063      	beq.n	800113e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001076:	4b4c      	ldr	r3, [pc, #304]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001082:	4b49      	ldr	r3, [pc, #292]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b08      	cmp	r3, #8
 800108c:	d11c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x18c>
 800108e:	4b46      	ldr	r3, [pc, #280]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d116      	bne.n	80010c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	4b43      	ldr	r3, [pc, #268]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <HAL_RCC_OscConfig+0x176>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d001      	beq.n	80010b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e1c0      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4b3d      	ldr	r3, [pc, #244]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4939      	ldr	r1, [pc, #228]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c6:	e03a      	b.n	800113e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d0:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fc83 	bl	80009e0 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff fc7f 	bl	80009e0 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1a1      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f0:	4b2d      	ldr	r3, [pc, #180]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4927      	ldr	r1, [pc, #156]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800110c:	4313      	orrs	r3, r2
 800110e:	600b      	str	r3, [r1, #0]
 8001110:	e015      	b.n	800113e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001112:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fc62 	bl	80009e0 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001120:	f7ff fc5e 	bl	80009e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e180      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d03a      	beq.n	80011c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d019      	beq.n	8001186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <HAL_RCC_OscConfig+0x274>)
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001158:	f7ff fc42 	bl	80009e0 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001160:	f7ff fc3e 	bl	80009e0 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e160      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fa68 	bl	8001654 <RCC_Delay>
 8001184:	e01c      	b.n	80011c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_RCC_OscConfig+0x274>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118c:	f7ff fc28 	bl	80009e0 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001192:	e00f      	b.n	80011b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fc24 	bl	80009e0 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d908      	bls.n	80011b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e146      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	42420000 	.word	0x42420000
 80011b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b4:	4b92      	ldr	r3, [pc, #584]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1e9      	bne.n	8001194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80a6 	beq.w	800131a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10d      	bne.n	80011fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b88      	ldr	r3, [pc, #544]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a87      	ldr	r2, [pc, #540]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b85      	ldr	r3, [pc, #532]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	4b82      	ldr	r3, [pc, #520]	@ (8001404 <HAL_RCC_OscConfig+0x4c8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001202:	2b00      	cmp	r3, #0
 8001204:	d118      	bne.n	8001238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001206:	4b7f      	ldr	r3, [pc, #508]	@ (8001404 <HAL_RCC_OscConfig+0x4c8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a7e      	ldr	r2, [pc, #504]	@ (8001404 <HAL_RCC_OscConfig+0x4c8>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001212:	f7ff fbe5 	bl	80009e0 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121a:	f7ff fbe1 	bl	80009e0 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b64      	cmp	r3, #100	@ 0x64
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e103      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122c:	4b75      	ldr	r3, [pc, #468]	@ (8001404 <HAL_RCC_OscConfig+0x4c8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x312>
 8001240:	4b6f      	ldr	r3, [pc, #444]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a6e      	ldr	r2, [pc, #440]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	e02d      	b.n	80012aa <HAL_RCC_OscConfig+0x36e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x334>
 8001256:	4b6a      	ldr	r3, [pc, #424]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a69      	ldr	r2, [pc, #420]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6213      	str	r3, [r2, #32]
 8001262:	4b67      	ldr	r3, [pc, #412]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4a66      	ldr	r2, [pc, #408]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	6213      	str	r3, [r2, #32]
 800126e:	e01c      	b.n	80012aa <HAL_RCC_OscConfig+0x36e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b05      	cmp	r3, #5
 8001276:	d10c      	bne.n	8001292 <HAL_RCC_OscConfig+0x356>
 8001278:	4b61      	ldr	r3, [pc, #388]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a60      	ldr	r2, [pc, #384]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	4b5e      	ldr	r3, [pc, #376]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4a5d      	ldr	r2, [pc, #372]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6213      	str	r3, [r2, #32]
 8001290:	e00b      	b.n	80012aa <HAL_RCC_OscConfig+0x36e>
 8001292:	4b5b      	ldr	r3, [pc, #364]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a5a      	ldr	r2, [pc, #360]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	4b58      	ldr	r3, [pc, #352]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a57      	ldr	r2, [pc, #348]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d015      	beq.n	80012de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fb95 	bl	80009e0 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff fb91 	bl	80009e0 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0b1      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0ee      	beq.n	80012ba <HAL_RCC_OscConfig+0x37e>
 80012dc:	e014      	b.n	8001308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7ff fb7f 	bl	80009e0 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e6:	f7ff fb7b 	bl	80009e0 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e09b      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fc:	4b40      	ldr	r3, [pc, #256]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1ee      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d105      	bne.n	800131a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130e:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a3b      	ldr	r2, [pc, #236]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8087 	beq.w	8001432 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001324:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b08      	cmp	r3, #8
 800132e:	d061      	beq.n	80013f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d146      	bne.n	80013c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001338:	4b33      	ldr	r3, [pc, #204]	@ (8001408 <HAL_RCC_OscConfig+0x4cc>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fb4f 	bl	80009e0 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff fb4b 	bl	80009e0 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e06d      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001358:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f0      	bne.n	8001346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800136c:	d108      	bne.n	8001380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800136e:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001372:	f023 020f 	bic.w	r2, r3, #15
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4921      	ldr	r1, [pc, #132]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	4313      	orrs	r3, r2
 800137e:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a19      	ldr	r1, [r3, #32]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001390:	430b      	orrs	r3, r1
 8001392:	491b      	ldr	r1, [pc, #108]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <HAL_RCC_OscConfig+0x4cc>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fb1f 	bl	80009e0 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a6:	f7ff fb1b 	bl	80009e0 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e03d      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x46a>
 80013c4:	e035      	b.n	8001432 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_RCC_OscConfig+0x4cc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fb08 	bl	80009e0 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff fb04 	bl	80009e0 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e026      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x498>
 80013f2:	e01e      	b.n	8001432 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d107      	bne.n	800140c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e019      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
 8001400:	40021000 	.word	0x40021000
 8001404:	40007000 	.word	0x40007000
 8001408:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_RCC_OscConfig+0x500>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	429a      	cmp	r2, r3
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	429a      	cmp	r2, r3
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000

08001440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0a0      	b.n	8001596 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800146c:	4b4c      	ldr	r3, [pc, #304]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a4b      	ldr	r2, [pc, #300]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 8001472:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001476:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001484:	4b46      	ldr	r3, [pc, #280]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a45      	ldr	r2, [pc, #276]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 800148a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800148e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001490:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4940      	ldr	r1, [pc, #256]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d040      	beq.n	8001530 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b3a      	ldr	r3, [pc, #232]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d115      	bne.n	80014ee <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e067      	b.n	8001596 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ce:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d109      	bne.n	80014ee <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e05b      	b.n	8001596 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014de:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e053      	b.n	8001596 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ee:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f023 0203 	bic.w	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4929      	ldr	r1, [pc, #164]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001500:	f7ff fa6e 	bl	80009e0 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	e00a      	b.n	800151e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f7ff fa6a 	bl	80009e0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e03b      	b.n	8001596 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 020c 	and.w	r2, r3, #12
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	429a      	cmp	r2, r3
 800152e:	d1eb      	bne.n	8001508 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800153c:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4915      	ldr	r1, [pc, #84]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	490d      	ldr	r1, [pc, #52]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800156e:	f000 f81f 	bl	80015b0 <HAL_RCC_GetSysClockFreq>
 8001572:	4602      	mov	r2, r0
 8001574:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_RCC_ClockConfig+0x160>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	4909      	ldr	r1, [pc, #36]	@ (80015a4 <HAL_RCC_ClockConfig+0x164>)
 8001580:	5ccb      	ldrb	r3, [r1, r3]
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <HAL_RCC_ClockConfig+0x168>)
 8001588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <HAL_RCC_ClockConfig+0x16c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f9e4 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	08001700 	.word	0x08001700
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <HAL_RCC_GetSysClockFreq+0x90>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d002      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x30>
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d003      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x36>
 80015de:	e026      	b.n	800162e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <HAL_RCC_GetSysClockFreq+0x94>)
 80015e2:	613b      	str	r3, [r7, #16]
      break;
 80015e4:	e026      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	4a16      	ldr	r2, [pc, #88]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x98>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00f      	beq.n	800161e <HAL_RCC_GetSysClockFreq+0x6e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <HAL_RCC_GetSysClockFreq+0x90>)
 8001600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	4a11      	ldr	r2, [pc, #68]	@ (800164c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <HAL_RCC_GetSysClockFreq+0x94>)
 8001610:	fb03 f202 	mul.w	r2, r3, r2
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	e004      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x78>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a0b      	ldr	r2, [pc, #44]	@ (8001650 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	613b      	str	r3, [r7, #16]
      break;
 800162c:	e002      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800162e:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <HAL_RCC_GetSysClockFreq+0x94>)
 8001630:	613b      	str	r3, [r7, #16]
      break;
 8001632:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001634:	693b      	ldr	r3, [r7, #16]
}
 8001636:	4618      	mov	r0, r3
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000
 8001644:	007a1200 	.word	0x007a1200
 8001648:	08001710 	.word	0x08001710
 800164c:	08001720 	.word	0x08001720
 8001650:	003d0900 	.word	0x003d0900

08001654 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <RCC_Delay+0x34>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <RCC_Delay+0x38>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0a5b      	lsrs	r3, r3, #9
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	fb02 f303 	mul.w	r3, r2, r3
 800166e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001670:	bf00      	nop
  }
  while (Delay --);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1e5a      	subs	r2, r3, #1
 8001676:	60fa      	str	r2, [r7, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f9      	bne.n	8001670 <RCC_Delay+0x1c>
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	20000000 	.word	0x20000000
 800168c:	10624dd3 	.word	0x10624dd3

08001690 <memset>:
 8001690:	4603      	mov	r3, r0
 8001692:	4402      	add	r2, r0
 8001694:	4293      	cmp	r3, r2
 8001696:	d100      	bne.n	800169a <memset+0xa>
 8001698:	4770      	bx	lr
 800169a:	f803 1b01 	strb.w	r1, [r3], #1
 800169e:	e7f9      	b.n	8001694 <memset+0x4>

080016a0 <__libc_init_array>:
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	2600      	movs	r6, #0
 80016a4:	4d0c      	ldr	r5, [pc, #48]	@ (80016d8 <__libc_init_array+0x38>)
 80016a6:	4c0d      	ldr	r4, [pc, #52]	@ (80016dc <__libc_init_array+0x3c>)
 80016a8:	1b64      	subs	r4, r4, r5
 80016aa:	10a4      	asrs	r4, r4, #2
 80016ac:	42a6      	cmp	r6, r4
 80016ae:	d109      	bne.n	80016c4 <__libc_init_array+0x24>
 80016b0:	f000 f81a 	bl	80016e8 <_init>
 80016b4:	2600      	movs	r6, #0
 80016b6:	4d0a      	ldr	r5, [pc, #40]	@ (80016e0 <__libc_init_array+0x40>)
 80016b8:	4c0a      	ldr	r4, [pc, #40]	@ (80016e4 <__libc_init_array+0x44>)
 80016ba:	1b64      	subs	r4, r4, r5
 80016bc:	10a4      	asrs	r4, r4, #2
 80016be:	42a6      	cmp	r6, r4
 80016c0:	d105      	bne.n	80016ce <__libc_init_array+0x2e>
 80016c2:	bd70      	pop	{r4, r5, r6, pc}
 80016c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016c8:	4798      	blx	r3
 80016ca:	3601      	adds	r6, #1
 80016cc:	e7ee      	b.n	80016ac <__libc_init_array+0xc>
 80016ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80016d2:	4798      	blx	r3
 80016d4:	3601      	adds	r6, #1
 80016d6:	e7f2      	b.n	80016be <__libc_init_array+0x1e>
 80016d8:	08001730 	.word	0x08001730
 80016dc:	08001730 	.word	0x08001730
 80016e0:	08001730 	.word	0x08001730
 80016e4:	08001734 	.word	0x08001734

080016e8 <_init>:
 80016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ea:	bf00      	nop
 80016ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ee:	bc08      	pop	{r3}
 80016f0:	469e      	mov	lr, r3
 80016f2:	4770      	bx	lr

080016f4 <_fini>:
 80016f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f6:	bf00      	nop
 80016f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016fa:	bc08      	pop	{r3}
 80016fc:	469e      	mov	lr, r3
 80016fe:	4770      	bx	lr
